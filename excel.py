import os
from datetime import datetime
from time import time

import xlwt
from nose.exc import SkipTest
from nose.plugins.base import Plugin


SYMBOL_WIDTH = 256
CELL_MAX_WIDTH = 65535

DATETIME_FORMAT = '{0.day:0>2}.{0.month:0>2}.{0.year} {0.hour:0>2}:{0.minute:0>2}:{0.second:0>2}'.format

StatisticLabelStyle = xlwt.easyxf('alignment: horizontal left; font: bold 1')
StatisticValueStyle = xlwt.easyxf('alignment: horizontal left;')
TestTimeStyle = xlwt.easyxf('alignment: horizontal center;', num_format_str='0.000')
TestStatusStyle = xlwt.easyxf('alignment: horizontal left;')


def col_width(text_len):
    width = SYMBOL_WIDTH * text_len
    return CELL_MAX_WIDTH if width > CELL_MAX_WIDTH else width


def exc_message(exc_info):
    """Return the exception's message."""
    exc = exc_info[1]
    if exc is None:
        result = exc_info[0]
    else:
        result = str(exc)
    return result


class Excel(Plugin):
    """This plugin provides test results in the standard Excel XLS file."""
    name = 'excel'

    def _timeTaken(self):
        taken = 0
        if hasattr(self, '_timer'):
            taken = time() - self._timer
        return taken

    def options(self, parser, env=os.environ):
        """Sets additional command line options."""
        super(Excel, self).options(parser, env=env)
        parser.add_option(
            '--excel-file', action='store',
            dest='excel_file', metavar='FILE',
            default=env.get('NOSE_EXCEL_FILE', 'nosetests.xls'),
            help=("Path to xls file to store the excel report in. "
                  "Default is nosetests.xls in the working directory "
                  "[NOSE_EXCEL_FILE]"))
        parser.add_option(
            '--excel-testsuite-name', action='store',
            dest='excel_testsuite_name', metavar="PACKAGE",
            default=env.get('NOSE_EXCEL_TESTSUITE_NAME', 'nosetests'),
            help=("Name of the testsuite in the xls, generated by plugin. "
                  "Default test suite name is nosetests."))

    def configure(self, options, conf):
        """Configures the excel plugin."""
        super(Excel, self).configure(options, conf)
        if self.enabled:
            self.stats = {'errors': 0, 'failures': 0, 'passes': 0, 'skipped': 0}
            self.errorlist = []
            self.error_report_file_name = os.path.realpath(options.excel_file)
            self.excel_testsuite_name = options.excel_testsuite_name

    def begin(self):
        self.start_datetime = datetime.now()

    def beforeTest(self, test):
        """Initializes a timer before starting a test."""
        self._timer = time()

    def report(self, stream):
        """Writes an XLS file"""
        end_datetime = datetime.now()
        total = self.stats['errors'] + self.stats['failures'] + self.stats['passes'] + self.stats['skipped']

        book = xlwt.Workbook()
        sheet = book.add_sheet('Results')

        sheet.write(0, 0, 'Suite', StatisticLabelStyle)
        sheet.write(0, 1, self.excel_testsuite_name, StatisticValueStyle)

        sheet.write(2, 0, 'Start datetime', StatisticLabelStyle)
        sheet.write(2, 1, DATETIME_FORMAT(self.start_datetime), StatisticValueStyle)
        sheet.write(3, 0, 'End datetime', StatisticLabelStyle)
        sheet.write(3, 1, DATETIME_FORMAT(end_datetime), StatisticValueStyle)

        sheet.write(5, 0, 'Total', StatisticLabelStyle)
        sheet.write(5, 1, total, StatisticValueStyle)
        sheet.write(6, 0, 'Errors', StatisticLabelStyle)
        sheet.write(6, 1, self.stats['errors'], StatisticValueStyle)
        sheet.write(7, 0, 'Failures', StatisticLabelStyle)
        sheet.write(7, 1, self.stats['failures'], StatisticValueStyle)
        sheet.write(8, 0, 'Passes', StatisticLabelStyle)
        sheet.write(8, 1, self.stats['passes'], StatisticValueStyle)
        sheet.write(9, 0, 'Skipped', StatisticLabelStyle)
        sheet.write(9, 1, self.stats['skipped'], StatisticValueStyle)

        row = 11
        for e in self.errorlist:
            sheet.write(row, 0, DATETIME_FORMAT(datetime.now()), StatisticValueStyle)
            sheet.write(row, 1, str(e['test']))
            sheet.write(row, 2, e['time'], TestTimeStyle)
            sheet.write(row, 3, e['status'], TestStatusStyle)
            sheet.write(row, 4, e['msg'])
            row += 1

        sheet.col(0).width = col_width(len(DATETIME_FORMAT(self.start_datetime)))
        sheet.col(1).width = col_width(max(map(lambda o: len(str(o['test'])), self.errorlist)))
        sheet.col(2).width = col_width(len(DATETIME_FORMAT(self.start_datetime)))
        sheet.col(3).width = col_width(10)
        sheet.col(4).width = col_width(max(map(lambda o: len(str(o['msg'])), self.errorlist)))

        book.save(self.error_report_file_name)

    def addError(self, test, err):
        """Add error/skipped to report."""
        taken = self._timeTaken()

        if issubclass(err[0], SkipTest):
            status = 'skipped'
            self.stats['skipped'] += 1
        else:
            status = 'error'
            self.stats['errors'] += 1

        self.errorlist.append({'test': test, 'time': taken, 'status': status, 'msg': exc_message(err)})

    def addFailure(self, test, err):
        """Add failure to report."""
        taken = self._timeTaken()
        self.stats['failures'] += 1
        self.errorlist.append({'test': test, 'time': taken, 'status': 'failure', 'msg': exc_message(err)})

    def addSuccess(self, test):
        """Add success to report."""
        taken = self._timeTaken()
        self.stats['passes'] += 1
        self.errorlist.append({'test': test, 'time': taken, 'status': 'ok', 'msg': ''})
