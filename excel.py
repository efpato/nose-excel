# -*- coding: utf-8 -*-

import os
import sys
from datetime import datetime, date
from io import StringIO
from time import time

import xlsxwriter
from nose.exc import SkipTest
from nose.plugins.base import Plugin
from nose.pyversion import force_unicode


DATETIME_FORMAT = '{0.day:0>2}.{0.month:0>2}.{0.year} {0.hour:0>2}:{0.minute:0>2}:{0.second:0>2}'.format


def exc_message(exc_info):
    """Return the exception's message."""
    exc = exc_info[1]
    if exc is None:
        result = exc_info[0]
    else:
        result = str(exc)
    return result


def send_mail(
        from_,
        to_,
        subject,
        text,
        files=(),
        server="localhost",
        port=587,
        username='',
        password='',
        isTls=True):
    import smtplib
    from email import encoders
    from email.mime.multipart import MIMEMultipart
    from email.mime.base import MIMEBase
    from email.mime.text import MIMEText
    from email.utils import COMMASPACE, formatdate

    msg = MIMEMultipart()
    msg['From'] = from_
    msg['To'] = COMMASPACE.join(to_)
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = subject

    msg.attach(MIMEText(text))

    for file in files:
        part = MIMEBase('application', "octet-stream")
        part.set_payload(open(file, 'rb').read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment; filename="{0}"'.format(os.path.basename(file)))
        msg.attach(part)

    smtp = smtplib.SMTP(server, port)
    if isTls:
        smtp.starttls()
    smtp.login(username, password)
    smtp.sendmail(from_, to_, msg.as_string())
    smtp.quit()


class Tee(object):
    def __init__(self, encoding, *args):
        self._encoding = encoding
        self._streams = args

    def write(self, data):
        data = force_unicode(data, self._encoding)
        for s in self._streams:
            s.write(data)

    def writelines(self, lines):
        for line in lines:
            self.write(line)

    def flush(self):
        for s in self._streams:
            s.flush()

    def isatty(self):
        return False


class Excel(Plugin):
    """This plugin provides test results in the standard Excel XLS file."""
    name = 'excel'
    enabled = False
    encoding = 'UTF-8'
    score = 1500

    def __init__(self):
        super(Excel, self).__init__()
        self._capture_stack = []
        self._currentStdout = None
        self._currentStderr = None
        self._timer = None

    def options(self, parser, env=os.environ):
        """Sets additional command line options."""
        super(Excel, self).options(parser, env=env)
        parser.add_option(
            '--excel-file', action='store',
            dest='excel_file', metavar='FILE',
            default=env.get('NOSE_EXCEL_FILE', 'nosetests.xlsx'),
            help=("Path to xls file to store the excel report in. "
                  "Default is nosetests.xlsx in the working directory "
                  "[NOSE_EXCEL_FILE]"))
        parser.add_option(
            '--excel-testsuite-name', action='store',
            dest='excel_testsuite_name', metavar="PACKAGE",
            default=env.get('NOSE_EXCEL_TESTSUITE_NAME', 'nosetests'),
            help=("Name of the testsuite in the xls, generated by plugin. "
                  "Default test suite name is nosetests."
                  "[NOSE_EXCEL_TESTSUITE_NAME]"))
        parser.add_option(
            '--smtp-server', action='store',
            dest='smtp_server', metavar="SMTP_SERVER",
            default=env.get('NOSE_EXCEL_SMTP_SERVER', 'smtp.gmail.com'),
            help=("Domain name or ip-address of SMTP server. "
                  "Default server is smtp.gmail.com "
                  "[NOSE_EXCEL_SMTP_SERVER]"))
        parser.add_option(
            '--smtp-port', action='store',
            dest='smtp_port', metavar="SMTP_PORT",
            default=env.get('NOSE_EXCEL_SMTP_PORT', 587),
            help=("Port of SMTP server. "
                  "Default port is 587 "
                  "[NOSE_EXCEL_SMTP_PORT]"))
        parser.add_option(
            '--smtp-user', action='store',
            dest='smtp_user', metavar="SMTP_USER",
            help="Username for connect to SMTP server.")
        parser.add_option(
            '--smtp-password', action='store',
            dest='smtp_password', metavar="SMTP_PASSWORD",
            help="Password for connect to SMTP server.")
        parser.add_option(
            '--mail-from', action='store',
            dest='mail_from', metavar="MAIL_FROM",
            help="Email sender.")
        parser.add_option(
            '--mail-to', action='store',
            dest='mail_to', metavar="MAIL_TO",
            help="List of mail recipients.")
        parser.add_option(
            '--mail-subject', action='store',
            dest='mail_subject', metavar="MAIL_SUBJECTS",
            default="Результаты проведения автоматизированного тестирования за %s" % date.today(),
            help="Email subject.")

    def configure(self, options, conf):
        """Configures the excel plugin."""
        super(Excel, self).configure(options, conf)
        if self.enabled:
            self.stats = {'errors': 0, 'failures': 0, 'passes': 0, 'skipped': 0}
            self.errorlist = []
            self.error_report_file_name = os.path.realpath(options.excel_file)
            self.excel_testsuite_name = options.excel_testsuite_name
            self.smtp_server = options.smtp_server
            self.smtp_port = int(options.smtp_port)
            self.smtp_user = options.smtp_user
            self.smtp_password = options.smtp_password
            self.mail_from = options.mail_from
            self.mail_to = options.mail_to
            self.mail_subject = options.mail_subject

    def begin(self):
        self.start_datetime = datetime.now()

    def finalize(self, test):
        while self._capture_stack:
            self._stopCapture()

    def report(self, stream):
        """Writes an XLS file"""
        end_datetime = datetime.now()
        total = self.stats['errors'] + self.stats['failures'] + self.stats['passes'] + self.stats['skipped']

        workbook = xlsxwriter.Workbook(self.error_report_file_name, {'constant_memory': True, 'strings_to_urls': True})

        label = workbook.add_format({'bold': 1, 'align': 'left'})
        number = workbook.add_format({'align': 'left'})
        taken = workbook.add_format({'num_format': '0.000', 'align': 'center'})

        sheet = workbook.add_worksheet()

        sheet.write(0, 0, self.excel_testsuite_name, label)

        sheet.write(2, 0, 'Start datetime', label)
        sheet.write(2, 1, DATETIME_FORMAT(self.start_datetime))
        sheet.write(3, 0, 'End datetime', label)
        sheet.write(3, 1, DATETIME_FORMAT(end_datetime))

        sheet.write(5, 0, 'Total', label)
        sheet.write(5, 1, total, number)
        sheet.write(6, 0, 'Errors', label)
        sheet.write(6, 1, self.stats['errors'], number)
        sheet.write(7, 0, 'Failures', label)
        sheet.write(7, 1, self.stats['failures'], number)
        sheet.write(8, 0, 'Passes', label)
        sheet.write(8, 1, self.stats['passes'], number)
        sheet.write(9, 0, 'Skipped', label)
        sheet.write(9, 1, self.stats['skipped'], number)

        row = 11
        for e in self.errorlist:
            sheet.write(row, 0, e[0])
            sheet.write(row, 1, e[1])
            sheet.write(row, 2, e[2], taken)
            sheet.write(row, 3, e[3])
            sheet.write(row, 4, e[4])
            row += 1

        sheet.set_column(0, 0, width=20)
        sheet.set_column(1, 1, width=max([len(e[1]) for e in self.errorlist]))
        sheet.set_column(2, 2, width=10)
        sheet.set_column(3, 3, width=10)
        sheet.set_column(4, 4, width=max([len(e[4]) for e in self.errorlist]))

        workbook.close()

        if self.mail_to:
            msg_body = \
                """
                Результаты тестирования!

                Всего выполнено тестов: {0}
                Из них:
                    - passed:  {3}
                    - failed:  {2}
                    - skipped: {4}
                    - errors:  {1}

                Подробный отчет прикреплен к письму ({5})
                """.format(
                    total,
                    self.stats['errors'],
                    self.stats['failures'],
                    self.stats['passes'],
                    self.stats['skipped'],
                    os.path.basename(self.error_report_file_name))
            send_mail(
                from_=self.mail_from,
                to_=self.mail_to.split(','),
                subject=self.mail_subject,
                text=msg_body,
                files=[self.error_report_file_name],
                server=self.smtp_server,
                port=self.smtp_port,
                username=self.smtp_user,
                password=self.smtp_password)

    def _startCapture(self):
        self._capture_stack.append((sys.stdout, sys.stderr))
        self._currentStdout = StringIO()
        self._currentStderr = StringIO()
        sys.stdout = Tee(self.encoding, self._currentStdout, sys.stdout)
        sys.stderr = Tee(self.encoding, self._currentStderr, sys.stderr)

    def _stopCapture(self):
        if self._capture_stack:
            sys.stdout, sys.stderr = self._capture_stack.pop()

    def startContext(self, context):
        self._startCapture()

    def stopContext(self, context):
        self._stopCapture()

    def beforeTest(self, test):
        """Initializes a timer before starting a test."""
        self._timer = time()
        self._startCapture()

    def afterTest(self, test):
        self._stopCapture()
        self._currentStdout = None
        self._currentStderr = None

    def _getCapturedStdout(self):
        if self._currentStdout:
            value = self._currentStdout.getvalue()
            return value if value else ''

    def _getCapturedStderr(self):
        if self._currentStderr:
            value = self._currentStderr.getvalue()
            return value if value else ''

    def _timeTaken(self):
        taken = 0
        if hasattr(self, '_timer'):
            taken = time() - self._timer
        return taken

    def addError(self, test, err):
        """Add error/skipped to report."""
        if issubclass(err[0], SkipTest):
            status = 'skipped'
            self.stats['skipped'] += 1
        else:
            status = 'error'
            self.stats['errors'] += 1

        self.errorlist.append((
            DATETIME_FORMAT(datetime.now()),
            str(test),
            self._timeTaken(),
            status,
            '%s\n%s\n%s' % (exc_message(err), self._getCapturedStdout(), self._getCapturedStderr())
        ))

    def addFailure(self, test, err):
        """Add failure to report."""
        self.stats['failures'] += 1
        self.errorlist.append((
            DATETIME_FORMAT(datetime.now()),
            str(test),
            self._timeTaken(),
            'failure',
            '%s\n%s\n%s' % (exc_message(err), self._getCapturedStdout(), self._getCapturedStderr())
        ))

    def addSuccess(self, test):
        """Add success to report."""
        self.stats['passes'] += 1
        self.errorlist.append((
            DATETIME_FORMAT(datetime.now()),
            str(test),
            self._timeTaken(),
            'ok',
            '%s\n%s' % (self._getCapturedStdout(), self._getCapturedStderr())
        ))
